import telebot
import time
import requests
from bs4 import BeautifulSoup
from threading import Thread

bot = telebot.TeleBot('7213095646:AAE2SqjNQUQ5xNG9lI0QzeRPkrvMh-tkwqE') 
check_time = 3600
URL = 'https://sberstudent.ru/sberseasons-moscow/'

last_available_courses = []
notification_chat_id = None


def check_courses():
    try:
        response = requests.get(URL, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')

        available_courses = []

        apply_buttons = soup.find_all('a', class_='btn btn--color-1 btn--size-48 utm-link')
        for button in apply_buttons:
            if 'Подать заявку' in button.get_text():
                h2_tag = button.find_previous('h2')

                if h2_tag:
                    course_title = h2_tag.get_text(strip=True)
                    if '(набор закрыт)' not in course_title.lower():
                        available_courses.append(course_title)

        filtered_courses = [course.strip() for course in available_courses if course.strip()]
        if "Стажировки в Сбере созданы для старта твоей карьеры" in filtered_courses:
            filtered_courses.remove("Стажировки в Сбере созданы для старта твоей карьеры")

        return filtered_courses

    except Exception as e:
        print(f"Ошибка: {e}")
        return []


def check_updates():
    global last_available_courses, notification_chat_id
    while True:
        if notification_chat_id:
            current_courses = check_courses()

            if current_courses != last_available_courses:
                new_courses = set(current_courses) - set(last_available_courses)

                if new_courses:
                    mes = "Появились новые направления!**\n\n" + "\n".join(f"• {course}" for course in new_courses)
                    bot.send_message(notification_chat_id, text=mes)

                last_available_courses = current_courses

        time.sleep(check_time)


@bot.message_handler(commands=['курс', 'курсы', 'направление', 'направления', 'вакансия', 'вакансии'])
def main(message):
    global notification_chat_id
    # chat_id первого пользователя, который обратился к боту
    if notification_chat_id is None:
        notification_chat_id = message.chat.id

    available_courses = check_courses()
    if available_courses:
        response = "Список доступных направлений:\n\n" + "\n".join(f"• {course}" for course in available_courses)
    else:
        response = "Нет доступных курсов для записи."
    bot.send_message(message.chat.id, response)


Thread(target=check_updates, daemon=True).start()
bot.polling(non_stop=True)
