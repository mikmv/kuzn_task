import telebot
import time
import requests
from bs4 import BeautifulSoup
from threading import Thread
from telebot import types

bot = telebot.TeleBot('7213095646:AAE2SqjNQUQ5xNG9lI0QzeRPkrvMh-tkwqE')
check_time = 3600
URL = 'https://sberstudent.ru/sberseasons-moscow/'

last_available_courses = []
active_chats = set()


def check_courses():
    try:
        response = requests.get(URL, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')

        available_courses = []

        apply_buttons = soup.find_all('a', class_='btn btn--color-1 btn--size-48 utm-link')
        for button in apply_buttons:
            if 'Подать заявку' in button.get_text():
                h2_tag = button.find_previous('h2')

                if h2_tag:
                    course_title = h2_tag.get_text(strip=True)
                    if '(набор закрыт)' not in course_title.lower():
                        available_courses.append(course_title)

        filtered_courses = [course.strip() for course in available_courses if course.strip()]
        if "Стажировки в Сбере созданы для старта твоей карьеры" in filtered_courses:
            filtered_courses.remove("Стажировки в Сбере созданы для старта твоей карьеры")

        return filtered_courses

    except Exception as e:
        print(f"Ошибка: {e}")
        return []


def check_updates():
    global last_available_courses
    while True:
        try:
            current_courses = check_courses()

            if current_courses != last_available_courses:
                new_courses = set(current_courses) - set(last_available_courses)

                if new_courses and active_chats:
                    mes = "Появились новые направления!**\n\n" + "\n".join(f"• {course}" for course in new_courses)
                    for chat_id in active_chats:
                        try:
                            bot.send_message(chat_id, mes)
                        except Exception as e:
                            print(f"Ошибка отправки сообщения в чат {chat_id}: {e}")
                            active_chats.discard(chat_id)

                last_available_courses = current_courses
        except Exception as e:
            print(f"Ошибка в фоновом потоке: {e}")

        time.sleep(check_time)


@bot.message_handler(commands=['start'])
def greeting(message):
    active_chats.add(message.chat.id)
    bot.send_message(message.chat.id,
                     "Вы подписаны на уведомления о новых стажировках.\n Для просмотра текущих направлений отправьте /direction\n" \
                     "Чтобы отписаться от уведомления, напишите /stop")


@bot.message_handler(commands=['direction'])
def main(message):

    markup=types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('Перейти на сайт с направлениями', url=URL))

    available_courses = check_courses()
    if available_courses:
        response = "Список доступных направлений:\n\n" + "\n".join(f"• {course}" for course in available_courses)
    else:
        response = "Нет доступных направлений для записи."
    bot.reply_to(message, response, reply_markup=markup)


@bot.message_handler(commands=['stop'])
def unsubscribe(message):
    active_chats.discard(message.chat.id)
    bot.send_message(message.chat.id, "Вы больше не будете получать уведомления о новых направлениях.\nДля подписки на уведомления, напишите /start")


Thread(target=check_updates, daemon=True).start()
bot.polling(non_stop=True)
